using System.Security.Claims;
using API.AppResponse;
using API.Data;
using API.DTOs;
using API.Models;
using API.Services.TokenServiceFolder;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace API.Services.UserServiceFolder
{
    public class UserService : IUserService
    {
        private readonly AppDbContext _context;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public UserService(AppDbContext context, IHttpContextAccessor httpContextAccessor)
        {
            _context = context;
            _httpContextAccessor = httpContextAccessor;
        }

        public async Task<AppResponse<OrderDto>> CreateOrder([FromBody] OrderCreateDto orderCreateDto)
        {
            try
            {
                // Extract user ID from the token
                var userId = GetUserIdFromToken();
                if (userId == 0)
                {
                    return new AppResponse<OrderDto>(null, "Unauthorized access", 401, false);
                }

                var user = await _context.Users
                    .FirstOrDefaultAsync(u => u.Id == userId);
                
                if (user == null)
                {
                    return new AppResponse<OrderDto>(null, "User not found", 404, false);
                }

                // Validate user has a delivery address
                if (user.Address == null || !user.Address.Any())
                {
                    return new AppResponse<OrderDto>(null, "Please add a delivery address before placing an order", 400, false);
                }

                var restaurant = await _context.Restaurants
                    .Include(r => r.Dishes)
                    .FirstOrDefaultAsync(r => r.Id == orderCreateDto.RestaurantId);

                // Validate restaurant exists
                if (restaurant == null)
                {
                    return new AppResponse<OrderDto>(null, "Restaurant not found", 404, false);
                }

                // Check if restaurant is open
                if (!restaurant.IsOpen)
                {
                    return new AppResponse<OrderDto>(null, "Restaurant is currently closed", 400, false);
                }

                // Validate order items
                if (orderCreateDto.OrderItems == null || !orderCreateDto.OrderItems.Any())
                {
                    return new AppResponse<OrderDto>(null, "Order must contain at least one item", 400, false);
                }

                // Calculate total amount and validate items
                decimal calculatedTotal = 0;
                foreach (var item in orderCreateDto.OrderItems)
                {
                    var dish = restaurant.Dishes.FirstOrDefault(d => d.Id == item.DishId);
                    if (dish == null)
                    {
                        return new AppResponse<OrderDto>(null, $"Dish with ID {item.DishId} not found in the restaurant", 404, false);
                    }

                    if (dish.Quantity < item.Quantity)
                    {
                        return new AppResponse<OrderDto>(null, $"Insufficient quantity available for dish: {dish.Name}", 400, false);
                    }

                    calculatedTotal += dish.Price * item.Quantity;
                }

                // Add delivery fee
                calculatedTotal += restaurant.DeliveryFee;

                

                // Validate payment method
                if (string.IsNullOrEmpty(orderCreateDto.PaymentMethod))
                {
                    orderCreateDto.PaymentMethod = "Cash"; // Default payment method
                }
                else if (!new[] { "Cash", "Card", "MobilePayment" }.Contains(orderCreateDto.PaymentMethod))
                {
                    return new AppResponse<OrderDto>(null, "Invalid payment method", 400, false);
                }

                // Create new order - ID will be auto-generated by the database
                var order = new Order
                {
                    TotalAmount = calculatedTotal,
                    PaymentMethod = orderCreateDto.PaymentMethod,
                    Status = "Pending",
                    UserId = userId,
                    RestaurantId = orderCreateDto.RestaurantId,
                    EmployeeId = null, // No employee assigned yet
                    CreatedAt = DateTime.UtcNow
                };

                // Add order items
                foreach (var item in orderCreateDto.OrderItems)
                {
                    var dish = restaurant.Dishes.First(d => d.Id == item.DishId);
                    
                    // Update dish quantity
                    dish.Quantity -= item.Quantity;

                    var orderItem = new OrderDish
                    {
                        DishId = item.DishId,
                        Quantity = item.Quantity,
                        UnitPrice = dish.Price
                    };
                    order.OrderItems.Add(orderItem);
                }

                await _context.Orders.AddAsync(order);
                await _context.SaveChangesAsync();

                // Create response DTO - now includes the auto-generated ID
                var responseDto = new OrderDto
                {
                    Id = order.Id, // Auto-generated ID by Entity Framework Core
                    TotalAmount = order.TotalAmount,
                    PaymentMethod = order.PaymentMethod,
                    Status = order.Status,
                    OrderDate = order.CreatedAt,
                    UserId = order.UserId,
                    UserName = user.UserName,
                    RestaurantId = order.RestaurantId,
                    RestaurantName = restaurant.Name,
                    OrderItems = order.OrderItems.Select(oi => new OrderItemDto
                    {
                        Id = oi.Id,
                        DishId = oi.DishId,
                        Quantity = oi.Quantity,
                        UnitPrice = oi.UnitPrice,
                        TotalPrice = oi.Quantity * oi.UnitPrice
                    }).ToList()
                };

                return new AppResponse<OrderDto>(responseDto, "Order created successfully", 201, true);
            }
            catch (Exception ex)
            {
                return new AppResponse<OrderDto>(null, $"An error occurred while creating the order: {ex.Message}", 500, false);
            }
        }

        public async Task<AppResponse<List<UserRestaurantDto>>> GetAllRestaurants()
        {
            try
            {
                var restaurants = await _context.Restaurants
                    .Include(r => r.Categories)
                    .ToListAsync();

                if (restaurants == null || !restaurants.Any())
                {
                    return new AppResponse<List<UserRestaurantDto>>(null, "No restaurants found", 404, false);
                }

                var UserRestaurantDtos = restaurants.Select(restaurant => new UserRestaurantDto
                {
                    Id = restaurant.Id,
                    Name = restaurant.Name,
                    Description = restaurant.Description,
                    LogoUrl = restaurant.LogoUrl,
                    CoverImageUrl = restaurant.CoverImageUrl,
                    Address = restaurant.Address,
                    PhoneNumber = restaurant.PhoneNumber,
                    OpeningHours = restaurant.OpeningHours,
                    Rating = restaurant.Rating,
                    ReviewCount = restaurant.ReviewCount,
                    IsOpen = restaurant.IsOpen,
                }).ToList();

                return new AppResponse<List<UserRestaurantDto>>(UserRestaurantDtos, "Restaurants retrieved successfully", 200, true);
            }
            catch (Exception ex)
            {
                return new AppResponse<List<UserRestaurantDto>>(null, ex.Message, 500, false);
            }
        }        public async Task<AppResponse<List<UserRestaurantDishesDto>>> GetAllRestaurantDishes(int restaurantId)
        {
            try
            {
                // First, check if the restaurant exists
                var restaurantExists = await _context.Restaurants.AnyAsync(r => r.Id == restaurantId);
                if (!restaurantExists)
                {
                    return new AppResponse<List<UserRestaurantDishesDto>>(null, $"Restaurant with ID {restaurantId} not found", 404, false);
                }
                
                var dishes = await _context.Dishes
                    .Include(d => d.Restaurant)
                    .Where(d => d.RestaurantId == restaurantId)
                    .ToListAsync();

                if (!dishes.Any())
                {
                    // Return empty list with success=true instead of an error
                    // This is more RESTful and allows the frontend to handle empty results
                    return new AppResponse<List<UserRestaurantDishesDto>>(
                        new List<UserRestaurantDishesDto>(), 
                        "No dishes found for this restaurant", 
                        200, 
                        true
                    );
                }                var dishDtos = dishes.Select(d => new UserRestaurantDishesDto
                {
                    Id = d.Id,
                    Name = d.Name,
                    Description = d.Description,
                    Price = d.Price,
                    ImageUrl = d.ImageUrl,
                    RestaurantId = d.RestaurantId,
                    RestaurantName = d.Restaurant.Name,
                    CategoryId = d.CategoryId,
                    IsAvailable = d.IsAvailable,
                }).ToList();

                return new AppResponse<List<UserRestaurantDishesDto>>(dishDtos, "Dishes retrieved successfully", 200, true);
            }
            catch (Exception ex)
            {
                // Log the exception details
                Console.WriteLine($"Error retrieving dishes: {ex}");
                return new AppResponse<List<UserRestaurantDishesDto>>(null, $"An error occurred: {ex.Message}", 500, false);
            }
        }public async Task<AppResponse<List<UserRestaurantCategoriesDto>>> GetAllRestaurantCategories(int restaurantId)
        {
            try
            {
                // First, check if the restaurant exists
                var restaurantExists = await _context.Restaurants.AnyAsync(r => r.Id == restaurantId);
                if (!restaurantExists)
                {
                    return new AppResponse<List<UserRestaurantCategoriesDto>>(null, $"Restaurant with ID {restaurantId} not found", 404, false);
                }

                // Then get the categories
                var RestaurantsCategories = await _context.RestaurantsCategories
                    .Include(c => c.Restaurant)
                    .Include(c => c.Category)
                    .Where(c => c.RestaurantId == restaurantId)
                    .ToListAsync();

                if (RestaurantsCategories == null || !RestaurantsCategories.Any())
                {
                    // Return empty list with success=true instead of an error
                    // This is more RESTful and allows the frontend to handle empty results
                    return new AppResponse<List<UserRestaurantCategoriesDto>>(
                        new List<UserRestaurantCategoriesDto>(), 
                        "No categories found for this restaurant", 
                        200, 
                        true
                    );
                }                var categoryDtos = RestaurantsCategories.Select(c => new UserRestaurantCategoriesDto
                {
                    Id = c.CategoryId,
                    Name = c.Category.Name,
                    Description = c.Category.Description,
                    ImageUrl = c.Category.ImageUrl,
                    RestaurantId = c.RestaurantId,
                    RestaurantName = c.Restaurant.Name,
                }).ToList();

                return new AppResponse<List<UserRestaurantCategoriesDto>>(categoryDtos, "Categories retrieved successfully", 200, true);
            }
            catch (Exception ex)
            {
                // Log the exception details
                Console.WriteLine($"Error retrieving categories: {ex}");
                return new AppResponse<List<UserRestaurantCategoriesDto>>(null, $"An error occurred: {ex.Message}", 500, false);
            }
        }



        // Helper method to extract user ID from the token
        private int GetUserIdFromToken()
        {
            var user = _httpContextAccessor.HttpContext?.User;
            if (user == null) return 0;

            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
            {
                return userId;
            }
            return 0;
        }
    }
    
}